* Code Style *
* 参考xylftp服务端C语言编程规范 *

A. 排版
1. 代码块采用缩进风格编写，缩进统一使用tab,而且tab长度为4个空白宽,_请不要_将tab自动转换为空格。

2. 相对独立的程序块之间和变量说明之后应该使用空行。

3. 同一行不允许写多条短语句。如下是不规范的写法：
	c = a;a = b;b = c;

4. if、for、do、while、case、switch、default等语句独占一行。

5. 函数开始和结束的{}应该独占一行，且对齐，如：
	int main()
	{
		/*Code*/
	}

6. 除函数开始和结束的{}外，其他的{均为每行最后一个字符，}独占一行且于其所包含的代码缩进相同,如：
	a.
		if (condition) {
			/*Code*/
		}
		else {
			/*code*/
		}
	b.
		switch里的case应该和switch对齐。比如：
        switch (err) {
        case -1:
                /*do something*/
                break;
        case -2:
                /*do something*/
                break;
        default:
                /*do sth*/
        }
	c.
		do while循环：
	do {
		/*code*/
	} while (condition);

7. 双目操作符如"=","+="等赋值操作符，"+","*","%"等算术操作符,"&&"等位操作符前后加空格。

8. 单目操作符如"&","+","~","!"等前后均不加空格。

9. "->"和"."操作符前后不加空格。

10.原则上每行程序不要超过80个字符，万一超过80个字符，则应该在合适的位置折行，以清晰，容易理解为标准。

11. 尽量不使用默认优先级的表达式，而使用()表示表达式的优先关系。

12. if,else,while,do,switch关键词后加空格，并且(condition)后也加空格，例如6.a；sizeof后不加空格，如s = sizeof(struct file);。

13. 多行宏定义，\应该对齐，例如：
	#define this_is_a_long_macro(x)		foo((x));	\
						bar((x));	\
						baz((x))	

14. 函数的参数列表的分割符逗号后面使用一个空格，例如:
	int function(int x, int y);

15. 源文件中不得有多余的空白，空行和非空行的行尾不应有空白。

B. 注释
1. 每个文件开头应该有基本的注释信息。包括：版权声明、作者修改者、完成日期、文件版本、文件的说明、主要函数列表、修改历史

2.注释不应与代码有二义性，代码内的注释应该靠近其注释的代码。一般注释应该在被其注释的代码之下并且有相同的缩进。
含有注释的代码应该与其后的语句使用空行隔开。 

3.注释建议使用传统C风格的/*.........*/。

4.注释可以中英文混合，但如果*不能准确地使用英文*，请使用中文注释。

5.多行注释如下:
	/*
	 * XXXXXXXXXXXXXXXXXXXXXXXXXXXX
	 * XXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	 */

C.标识符命名规范
1.变量全部使用小写字母，宏定义与全局变量全部使用大写，使用下划线"_"分隔单词。

2.在不引起歧义的情况下可以使用缩写,但要保证缩写有意义且能被他人理解。

3.除局部循环变量可以使用i,j,k等字母外，其他变量必须使用有意义的命名。

4.函数名用动词+名词,而变量名使用名词+名词或形容词+名词,建议小写。

5.只被模块内部调用的函数使用下划线"_"开头,只在本文件中使用的函数，使用static声明。提供给其他文件调用的函数使用字
母开头。	

6.定义指针变量时，星号应该紧贴在变量名。函数返回值如果是指针类型，星号则应该紧跟在类型名后，如：
void** foo(int *p)
{
	int *p1;
	int **q;
	/**/
}
